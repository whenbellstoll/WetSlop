[gd_resource type="VisualShader" load_steps=19 format=3 uid="uid://sicj3g6ao7m5"]

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_qq1bg"]
parameter_name = "shallow_color"
default_value_enabled = true
default_value = Color(0, 0.83784, 0, 0.686275)

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_aqgif"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_hq7um"]
size = Vector2(404.126, 270.466)
expression = "vec3 duv = vec3(4.0 / 512.0, 4.0 / 512.0, 0);
float v1 = texture(sim, UV - duv.xz).y;
float v2 = texture(sim, UV + duv.xz).y;
float v3 = texture(sim, UV - duv.zy).y;
float v4 = texture(sim, UV + duv.zy).y;

normal = normalize(vec3(v1 - v2, v3 - v4, 0.3));"

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_555av"]
parameter_name = "Texture2DParameter"
texture_source = 2

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_13rtk"]
parameter_name = "simulation"

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_t3hvh"]
size = Vector2(448, 349.1)
expression = "float d = texture(DEPTH_TEXTURE, SCREEN_UV).r;
d = PROJECTION_MATRIX[3][2] / (d + PROJECTION_MATRIX[2][2]);
d = d + VERTEX.z;
depth = exp(-d * murkiness);"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_gcisw"]
parameter_name = "murkiness"
default_value_enabled = true
default_value = 0.5

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_f4q7w"]
function = 31

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_7i04m"]
parameter_name = "ColorParameter"
default_value_enabled = true
default_value = Color(0, 0.196078, 0, 0.901961)

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_xybk0"]
input_name = "vertex"

[sub_resource type="VisualShaderNodeParameterRef" id="VisualShaderNodeParameterRef_bsrb1"]
parameter_name = "simulation"
param_type = 9

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_k7cx1"]
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_vy4ax"]
expanded_output_ports = [0]
source = 5

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_bblqy"]
parameter_name = "amplitude"
default_value_enabled = true
default_value = 0.5

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_gna3r"]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_abyt4"]
operator = 2

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_pbf2l"]
input_name = "normal"

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_mjlrf"]

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx;

uniform sampler2D simulation;
uniform float amplitude = 0.5;
uniform vec4 ColorParameter : source_color = vec4(0.000000, 0.196078, 0.000000, 0.901961);
uniform vec4 shallow_color : source_color = vec4(0.000000, 0.837840, 0.000000, 0.686275);
uniform float murkiness = 0.5;
uniform sampler2D Texture2DParameter : hint_depth_texture;



void vertex() {
// Input:10
	vec3 n_out10p0 = VERTEX;


// Input:8
	vec3 n_out8p0 = NORMAL;


// Input:3
	vec2 n_out3p0 = UV;


	vec4 n_out4p0;
// Texture2D:4
	n_out4p0 = texture(simulation, n_out3p0);
	float n_out4p1 = n_out4p0.r;


// FloatParameter:5
	float n_out5p0 = amplitude;


// FloatOp:6
	float n_out6p0 = n_out4p1 * n_out5p0;


// VectorOp:7
	vec3 n_out7p0 = n_out8p0 * vec3(n_out6p0);


// VectorOp:9
	vec3 n_out9p0 = n_out10p0 + n_out7p0;


// Output:0
	VERTEX = n_out9p0;


}

void fragment() {
// ColorParameter:9
	vec4 n_out9p0 = ColorParameter;


// ColorParameter:10
	vec4 n_out10p0 = shallow_color;


// FloatParameter:7
	float n_out7p0 = murkiness;


	float n_out6p0;
// Expression:6
	n_out6p0 = 0.0;
	{
		float d = texture(Texture2DParameter, SCREEN_UV).r;
		d = PROJECTION_MATRIX[3][2] / (d + PROJECTION_MATRIX[2][2]);
		d = d + VERTEX.z;
		n_out6p0 = exp(-d * n_out7p0);
	}


// Mix:11
	vec3 n_out11p0 = mix(vec3(n_out9p0.xyz), vec3(n_out10p0.xyz), vec3(n_out6p0));


// FloatFunc:8
	float n_out8p0 = 1.0 - n_out6p0;


	vec3 n_out12p0;
// Expression:12
	n_out12p0 = vec3(0.0, 0.0, 0.0);
	{
		vec3 duv = vec3(4.0 / 512.0, 4.0 / 512.0, 0);
		float v1 = texture(simulation, UV - duv.xz).y;
		float v2 = texture(simulation, UV + duv.xz).y;
		float v3 = texture(simulation, UV - duv.zy).y;
		float v4 = texture(simulation, UV + duv.zy).y;
		
		n_out12p0 = normalize(vec3(v1 - v2, v3 - v4, 0.3));
	}


// Output:0
	ALBEDO = n_out11p0;
	ALPHA = n_out8p0;
	NORMAL = n_out12p0;


}
"
graph_offset = Vector2(-812.194, 392.005)
nodes/vertex/2/node = SubResource("VisualShaderNodeParameterRef_bsrb1")
nodes/vertex/2/position = Vector2(-980, 600)
nodes/vertex/3/node = SubResource("VisualShaderNodeInput_k7cx1")
nodes/vertex/3/position = Vector2(-1060, 240)
nodes/vertex/4/node = SubResource("VisualShaderNodeTexture_vy4ax")
nodes/vertex/4/position = Vector2(-740, 260)
nodes/vertex/5/node = SubResource("VisualShaderNodeFloatParameter_bblqy")
nodes/vertex/5/position = Vector2(-720, 560)
nodes/vertex/6/node = SubResource("VisualShaderNodeFloatOp_gna3r")
nodes/vertex/6/position = Vector2(-420, 380)
nodes/vertex/7/node = SubResource("VisualShaderNodeVectorOp_abyt4")
nodes/vertex/7/position = Vector2(-220, 240)
nodes/vertex/8/node = SubResource("VisualShaderNodeInput_pbf2l")
nodes/vertex/8/position = Vector2(-540, 220)
nodes/vertex/9/node = SubResource("VisualShaderNodeVectorOp_mjlrf")
nodes/vertex/9/position = Vector2(0, 140)
nodes/vertex/10/node = SubResource("VisualShaderNodeInput_xybk0")
nodes/vertex/10/position = Vector2(-351.582, 37.1797)
nodes/vertex/connections = PackedInt32Array(3, 0, 4, 0, 2, 0, 4, 2, 4, 1, 6, 0, 5, 0, 6, 1, 6, 0, 7, 1, 8, 0, 7, 0, 7, 0, 9, 1, 10, 0, 9, 0, 9, 0, 0, 0)
nodes/fragment/2/node = SubResource("VisualShaderNodeTexture2DParameter_13rtk")
nodes/fragment/2/position = Vector2(-1220, 200)
nodes/fragment/6/node = SubResource("VisualShaderNodeExpression_t3hvh")
nodes/fragment/6/position = Vector2(-780, 800)
nodes/fragment/6/size = Vector2(448, 349.1)
nodes/fragment/6/input_ports = "0,0,murkiness;1,8,DEPTH_TEXTURE;"
nodes/fragment/6/output_ports = "0,0,depth;"
nodes/fragment/6/expression = "float d = texture(DEPTH_TEXTURE, SCREEN_UV).r;
d = PROJECTION_MATRIX[3][2] / (d + PROJECTION_MATRIX[2][2]);
d = d + VERTEX.z;
depth = exp(-d * murkiness);"
nodes/fragment/7/node = SubResource("VisualShaderNodeFloatParameter_gcisw")
nodes/fragment/7/position = Vector2(-1140, 940)
nodes/fragment/8/node = SubResource("VisualShaderNodeFloatFunc_f4q7w")
nodes/fragment/8/position = Vector2(105.032, 697.244)
nodes/fragment/9/node = SubResource("VisualShaderNodeColorParameter_7i04m")
nodes/fragment/9/position = Vector2(-260, 60)
nodes/fragment/10/node = SubResource("VisualShaderNodeColorParameter_qq1bg")
nodes/fragment/10/position = Vector2(-240, 320)
nodes/fragment/11/node = SubResource("VisualShaderNodeMix_aqgif")
nodes/fragment/11/position = Vector2(80, 160)
nodes/fragment/12/node = SubResource("VisualShaderNodeExpression_hq7um")
nodes/fragment/12/position = Vector2(-840, 60)
nodes/fragment/12/size = Vector2(404.126, 270.466)
nodes/fragment/12/input_ports = "0,8,sim;"
nodes/fragment/12/output_ports = "0,4,normal;"
nodes/fragment/12/expression = "vec3 duv = vec3(4.0 / 512.0, 4.0 / 512.0, 0);
float v1 = texture(sim, UV - duv.xz).y;
float v2 = texture(sim, UV + duv.xz).y;
float v3 = texture(sim, UV - duv.zy).y;
float v4 = texture(sim, UV + duv.zy).y;

normal = normalize(vec3(v1 - v2, v3 - v4, 0.3));"
nodes/fragment/13/node = SubResource("VisualShaderNodeTexture2DParameter_555av")
nodes/fragment/13/position = Vector2(-1120, 600)
nodes/fragment/connections = PackedInt32Array(7, 0, 6, 0, 6, 0, 8, 0, 8, 0, 0, 1, 9, 0, 11, 0, 10, 0, 11, 1, 6, 0, 11, 2, 11, 0, 0, 0, 2, 0, 12, 0, 12, 0, 0, 8, 13, 0, 6, 1)
